


import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.cas.CasAuthenticationException;
import org.apache.shiro.cas.CasRealm;
import org.apache.shiro.cas.CasToken;
import org.apache.shiro.subject.PrincipalCollection;
import org.apache.shiro.subject.SimplePrincipalCollection;
import org.jasig.cas.client.authentication.AttributePrincipal;
import org.jasig.cas.client.validation.Assertion;
import org.jasig.cas.client.validation.TicketValidationException;
import org.jasig.cas.client.validation.TicketValidator;

import java.util.*;

/**
 * 创建权限认证
 */

public class ShiroCasRealm extends CasRealm {

    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
        SimplePrincipalCollection principalCollection = (SimplePrincipalCollection)principals;
        List<Object> listPrincipals = principalCollection.asList();
        Map<String, String> attributes = (Map)listPrincipals.get(0);
        Map<String, Object> permitionMap = JsonUtil.toMap(attributes.get("permissions"));
        List<String> permitions = (List<String>) permitionMap.get("datafill");
        SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();
        simpleAuthorizationInfo.addStringPermissions(permitions);
        return simpleAuthorizationInfo;
    }

    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
        CasToken casToken = (CasToken) token;
        if (token == null) {
            return null;
        }

        //获取ticket
        String ticket = (String)casToken.getCredentials();

        TicketValidator ticketValidator = ensureTicketValidator();

        try {
            //回传ticket到服务端验证
            Assertion casAssertion = ticketValidator.validate(ticket, getCasService());
            AttributePrincipal casPrincipal = casAssertion.getPrincipal();
            String userName = casPrincipal.getName();

            Map<String, Object> attributes = casPrincipal.getAttributes();
            casToken.setUserId(userName);

            String rememberMeAttributeName = getRememberMeAttributeName();
            String rememberMeStringValue = (String)attributes.get(rememberMeAttributeName);
            boolean isRemembered = rememberMeStringValue != null && Boolean.parseBoolean(rememberMeStringValue);

            if(isRemembered){
                casToken.setRememberMe(true);
            }

            PrincipalCollection principalCollection = new SimplePrincipalCollection(attributes, this.getName());
            return new SimpleAuthenticationInfo(principalCollection, ticket);


        } catch (TicketValidationException e) {
            throw new CasAuthenticationException("Unable to validate ticket [" + ticket + "]", e);
        }
    }

}
